#!/usr/bin/env python

import os
import re
import csv
import sys
import signal
import argparse
from datetime import datetime


# without this, we may encounter fields larger than can be read
csv.field_size_limit(sys.maxsize)


class XLSXReader(object):

    headers = None

    def __init__(self, fileobj):
        from openpyxl import load_workbook
        self.wb = load_workbook(fileobj, read_only=True, data_only=True)
        self.ws = self.wb.active

    def __iter__(self):

        for row in self.ws.rows:

            if self.headers is None:
                self.headers = []
                for cell in row:
                    self.headers.append(cell.value)
                continue

            values = [c.value for c in row]
            values = values[:len(self.headers)]
            while len(values) < len(self.headers):
                values.append(None)

            yield dict(zip(self.headers, values))


class Cut(object):

    def __init__(self, name=None, start=None, end=None, format=None):
        self.name = name
        self.start = start
        self.end = end
        self.format = format

    def __repr__(self):
        return "Cut(name={!r}, start={!r}, end={!r}, format={!r})".format(
            self.name,
            self.start,
            self.end,
            self.format,
        )

    def parse(self, value):

        # consider the empty string to be null basically and attempt no further
        # transformations
        if value == "":
            return value

        if self.format is not None:

            # signed overpunch
            format_match = re.search(r'^s9[(](\d+)[)](v9[(](\d+)[)])?$', self.format, flags=re.I)
            if format_match is not None:

                if format_match.groups()[1] is None:
                    decimals = 0
                else:
                    decimals = int(format_match.groups()[2])

                import overpunch
                value = overpunch.extract(value, decimals=decimals)

                value = "{}".format(value)
                return value

            # signed overpunch v2
            format_match = re.search(r'^s9[(](\d+)[)]v(9+)$', self.format, flags=re.I)
            if format_match is not None:

                decimals = len(format_match.groups()[1])

                import overpunch
                value = overpunch.extract(value, decimals=decimals)

                value = "{}".format(value)
                return value

            # implicit decimal point
            format_match = re.search(r'^9[(](\d+)[)]v9[(](\d+)[)]$', self.format, flags=re.I)
            if format_match is not None:

                decimals = int(format_match.groups()[1])
                if decimals == 0:
                    value = value.lstrip("0") or "0"
                else:
                    value = (value[:-decimals].lstrip("0") or "0") + "." + value[-decimals:]
                return value

            # implicit decimal point v2
            format_match = re.search(r'^9[(](\d+)[)]v(9+)$', self.format, flags=re.I)
            if format_match is not None:

                decimals = len(format_match.groups()[1])
                if decimals == 0:
                    value = value.lstrip("0") or "0"
                else:
                    value = (value[:-decimals].lstrip("0") or "0") + "." + value[-decimals:]
                return value

            # a different implied decimal point format
            format_match = re.search(r'^N\s?[(](\d+).(\d+)[)]$', self.format)
            if format_match is not None:

                decimals = int(format_match.groups()[1])
                if decimals == 0:
                    value = value.lstrip("0") or "0"
                else:
                    value = (value[:-decimals].lstrip("0") or "0") + "." + value[-decimals:]
                return value

            # date handling, format is strptime, output is YYYYMMDD
            format_match = re.search(r'^D[(](.+)[)]$', self.format)
            if format_match is not None:

                format_specifier = format_match.groups()[0]

                # nothing to do here, everything is already in the right format
                if format_specifier in ("CCYYMMDD", "YYYYMMDD"):
                    return value

                if format_specifier == "CCYYDDD":
                    format_specifier = "%Y%j"
                elif format_specifier == "YYYYDDD":
                    format_specifier = "%Y%j"
                elif format_specifier == "JULIAN":
                    format_specifier = "%Y%j"
                elif format_specifier == "YYDDD":
                    format_specifier = "%y%j"
                elif format_specifier == "MMDDYYYY":
                    format_specifier = "%m%d%Y"
                elif format_specifier == "MMDDYY":
                    format_specifier = "%m%d%y"
                elif format_specifier == "MMDDYY":
                    format_specifier = "%m%d%y"

                # unknown format? hopefully it is strptime compatible

                value = datetime.strptime(value, format_specifier)
                value = "{:%Y%m%d}".format(value)
                return value

        return value


class Converter(object):

    def __init__(self, cuts_path, name_overrides=None):

        if name_overrides is None:
            name_overrides = []

        self.cuts = []

        if cuts_path.endswith(".csv") or cuts_path.endswith(".xlsx"):
            if cuts_path.endswith(".csv"):
                cfp = open(cuts_path, "r")
                reader = csv.DictReader(cfp)
            elif cuts_path.endswith(".xlsx"):
                cfp = open(cuts_path, "rb")
                reader = XLSXReader(cfp)

            name_key = None
            end_key = None
            format_key = None

            for field, field_name in name_overrides:
                if field == "name":
                    name_key = field_name
                elif field == "end":
                    end_key = field_name
                elif field == "format":
                    format_key = field_name
                else:
                    raise ValueError(
                        "Unable to handle field name override {!r} (must be "
                        "one of 'name', 'end', or 'format')"
                        .format(field)
                    )

            for row in reader:
                if name_key is None:

                    name_options = [
                        "name",
                        "Field Name",
                    ]

                    name_key = self._get_key_for_name(
                        row,
                        "name",
                        name_options,
                    )

                if end_key is None:

                    end_options = [
                        "end",
                        "End",
                        "To POS",
                        "Field Location To",
                        "Positions",
                    ]

                    end_key = self._get_key_for_name(
                        row,
                        "end",
                        end_options,
                    )

                if format_key is None:

                    format_options = [
                        "format",
                        "Format",
                        "Type",
                        "Field Type",
                        "Field Format",
                    ]

                    format_key = self._get_key_for_name(
                        row,
                        "format",
                        format_options,
                        missing_ok=True,
                    )

                name = row.get(name_key)

                if not name:
                    continue

                raw_end = row.get(end_key)
                if raw_end is not None:
                    raw_end = str(raw_end)

                # allow position to be specified with a range
                if raw_end is not None:
                    if "-" in raw_end:
                        _, raw_end = raw_end.split("-")

                end = int(raw_end)
                format = row.get(format_key)

                cut = Cut(name=name, end=end, format=format)
                self.cuts.append(cut)

        else:
            cfp = open(cuts_path, "r")

            for line in cfp:
                line = line.strip()

                try:
                    name, end = re.split(r'\s+', line)

                    cut = Cut(name=name, end=int(end))
                    self.cuts.append(cut)

                except TypeError:
                    cut = Cut(name=line, end=None)
                    self.cuts.append(cut)
                except ValueError:
                    cut = Cut(name=line, end=None)
                    self.cuts.append(cut)

    def _get_key_for_name(self, row, name, options, missing_ok=False):
        for option in options:
            if option in row:
                return option

        if not missing_ok:
            raise ValueError("Unable to determine key for '{}'".format(name))

    @property
    def fields(self):
        return [v.name for v in self.cuts]

    def parse(self, fp):
        if fp == "-":
            fp = sys.stdin
        elif isinstance(fp, str):
            fp = open(fp, "r")
        elif isinstance(fp, int):
            fp = os.fdopen(fp, "r")

        for line in fp:
            yield self.split(line)

    def split(self, line):
        values = []
        start = 0
        for cut in self.cuts:

            end = cut.end

            if end is None:
                value = line[start:].strip()
            else:
                value = line[start:end].strip()

            value = cut.parse(value)
            values.append(value)

            start = end

        return values


if __name__ == "__main__":

    # ignore pipe errors using head, etc
    signal.signal(signal.SIGPIPE, signal.SIG_DFL) 

    parser = argparse.ArgumentParser()
    parser.add_argument("cuts", help="path to the cuts file")
    parser.add_argument("files", nargs="*", help="files to process")
    parser.add_argument(
        "--override",
        dest="overrides",
        action="append",
        nargs=1,
        metavar=("field=N",),
        help=(
            "manual field name specifications to override defaults. use "
            "--override 'name=The Name' to specify"
        ),
    )

    args = parser.parse_args()

    if not args.files:
        args.files = ["-"]

    name_overrides = []
    for raw_override in args.overrides:

        override = raw_override[0]

        match = re.search(r'^(name|end|format)=(.+)$', override)

        if match is None:
            sys.stderr.write(
                "override {!r} is not valid. specify one of name, end, or "
                "format followed by an equal sign and the corresponding header "
                "name in the csv or excel cuts specification.\n"
                .format(override)
            )
            sys.exit(1)

        name_overrides.append((match.groups()[0], match.groups()[1]))

    converter = Converter(args.cuts, name_overrides=name_overrides)

    writer = csv.writer(sys.stdout)
    writer.writerow(converter.fields)
    for file in args.files:
        for rec in converter.parse(file):
            writer.writerow(rec)

